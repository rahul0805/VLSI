
// Generated by Cadence Genus(TM) Synthesis Solution 16.21-s018_1
// Generated on: Sep 26 2019 15:31:54 IST (Sep 26 2019 10:01:54 UTC)

// Verification Directory fv/sixteen 

module bit_adder(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (c), .B (b), .CI (a), .CO (c1), .S (s));
endmodule

module bit_adder_1(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module bit_adder_2(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module bit_adder_3(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module four(a, b, ci, s, c1);
  input [3:0] a, b;
  input ci;
  output [3:0] s;
  output c1;
  wire [3:0] a, b;
  wire ci;
  wire [3:0] s;
  wire c1;
  wire [0:2] d;
  bit_adder g1(a[0], b[0], ci, s[0], d[0]);
  bit_adder_1 g2(a[1], b[1], d[0], s[1], d[1]);
  bit_adder_2 g3(a[2], b[2], d[1], s[2], d[2]);
  bit_adder_3 g4(a[3], b[3], d[2], s[3], c1);
endmodule

module bit_adder_4(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module bit_adder_5(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module bit_adder_6(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module bit_adder_7(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module four_1(a, b, ci, s, c1);
  input [3:0] a, b;
  input ci;
  output [3:0] s;
  output c1;
  wire [3:0] a, b;
  wire ci;
  wire [3:0] s;
  wire c1;
  wire [0:2] d;
  bit_adder_4 g1(.a (a[0]), .b (b[0]), .c (ci), .s (s[0]), .c1 (d[0]));
  bit_adder_5 g2(.a (a[1]), .b (b[1]), .c (d[0]), .s (s[1]), .c1
       (d[1]));
  bit_adder_6 g3(.a (a[2]), .b (b[2]), .c (d[1]), .s (s[2]), .c1
       (d[2]));
  bit_adder_7 g4(.a (a[3]), .b (b[3]), .c (d[2]), .s (s[3]), .c1 (c1));
endmodule

module bit_adder_8(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module bit_adder_9(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module bit_adder_10(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module bit_adder_11(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module four_2(a, b, ci, s, c1);
  input [3:0] a, b;
  input ci;
  output [3:0] s;
  output c1;
  wire [3:0] a, b;
  wire ci;
  wire [3:0] s;
  wire c1;
  wire [0:2] d;
  bit_adder_8 g1(.a (a[0]), .b (b[0]), .c (ci), .s (s[0]), .c1 (d[0]));
  bit_adder_9 g2(.a (a[1]), .b (b[1]), .c (d[0]), .s (s[1]), .c1
       (d[1]));
  bit_adder_10 g3(.a (a[2]), .b (b[2]), .c (d[1]), .s (s[2]), .c1
       (d[2]));
  bit_adder_11 g4(.a (a[3]), .b (b[3]), .c (d[2]), .s (s[3]), .c1 (c1));
endmodule

module bit_adder_12(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module bit_adder_13(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module bit_adder_14(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module bit_adder_15(a, b, c, s, c1);
  input a, b, c;
  output s, c1;
  wire a, b, c;
  wire s, c1;
  ADDFX1 g2(.A (b), .B (a), .CI (c), .CO (c1), .S (s));
endmodule

module four_3(a, b, ci, s, c1);
  input [3:0] a, b;
  input ci;
  output [3:0] s;
  output c1;
  wire [3:0] a, b;
  wire ci;
  wire [3:0] s;
  wire c1;
  wire [0:2] d;
  bit_adder_12 g1(.a (a[0]), .b (b[0]), .c (ci), .s (s[0]), .c1 (d[0]));
  bit_adder_13 g2(.a (a[1]), .b (b[1]), .c (d[0]), .s (s[1]), .c1
       (d[1]));
  bit_adder_14 g3(.a (a[2]), .b (b[2]), .c (d[1]), .s (s[2]), .c1
       (d[2]));
  bit_adder_15 g4(.a (a[3]), .b (b[3]), .c (d[2]), .s (s[3]), .c1 (c1));
endmodule

module sixteen(a, b, ci, s, c1);
  input [15:0] a, b;
  input ci;
  output [15:0] s;
  output c1;
  wire [15:0] a, b;
  wire ci;
  wire [15:0] s;
  wire c1;
  wire [2:0] d;
  four g1(a[3:0], b[3:0], ci, s[3:0], d[0]);
  four_1 g2(a[7:4], b[7:4], d[0], s[7:4], d[1]);
  four_2 g3(a[11:8], b[11:8], d[1], s[11:8], d[2]);
  four_3 g4(a[15:12], b[15:12], d[2], s[15:12], c1);
endmodule

